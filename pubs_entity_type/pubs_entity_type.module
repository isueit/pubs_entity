<?php

/**
 * Validate entity in form and entity
 */
function validatePubsEntity($validateID, $curEntity) {
  $filter_options = array('options' => array('min_range' => 0));
  if (!is_numeric($validateID) || filter_var($validateID, FILTER_VALIDATE_INT, $filter_options) === FALSE) {
    return "NaN";
  }

  $url = \Drupal::config('pubs_entity_type.settings')->get('pubs_store_url');
  $url_host = parse_url($url, PHP_URL_HOST);
    try {
      if (0 === substr_compare($url, "/", -1) && explode(' ', get_headers($url . $validateID, 1)[0])[1] == 200) {
        $raw = file_get_contents($url . $validateID);
      } else if (0 === substr_compare($url, ".json", -5) && explode(' ', get_headers($url, 1)[0])[1] == 200) {
        $raw = file_get_contents($url);
      } else if (explode(' ', get_headers($url . "/" . $validateID, 1)[0])[1] == 200) {
        $raw = file_get_contents($url . "/" . $validateID);
      } else {
        $raw = "";
      }
      $decoded = json_decode($raw);
      if (is_object($decoded) && get_class($decoded) == 'stdClass') {
        $items[] = $decoded;
      } else if (is_array($decoded)) {
        $items = $decoded;
      } else {
        $items = [];
      }
      $found = null;

      foreach ($items as $item) {
        if (array_key_exists('productID', $item) && $validateID == $item->productID) {
          $found = $item;
          break;
        }
      }
      if ($found != null) {
        $existing = \Drupal::entityTypeManager()->getStorage('pubs_entity')->loadByProperties(['field_product_id' => $validateID]);
        if ($curEntity != null && $curEntity->isNew()) {
          if (count($existing) == 0) {
            return $found; //Creating new
          } else {
            return "Entity with ID already exists";
          }
        } else {
          if ($curEntity != null && $curEntity->field_product_id->value != $validateID) {
            return $found; //Editing id
          } elseif ($curEntity != null && $curEntity->field_product_id->value == $validateID) {
            return $found; //Editing other attribute
          } else {
            return "Null entity";
          }
        }
      } else {
        return "Product with ID not found";
      }
    } catch (Exception $e) {
      return "Exception thrown";
    }

  return "Unknown Error";
}


/**
 * Implements hook_rebuild()
 * Rebuild Publication entities
 * Only updates published publications created outside of feeds, as they may not exist in the provided feed
 */
function pubs_entity_type_rebuild() {
  $entities = \Drupal::entityTypeManager()->getStorage('pubs_entity')->loadByProperties(['status' => TRUE]);
  $unpublished = [];
  foreach ($entities as $entity) {
    $passed = validatePubsEntity($entity->field_product_id->value, $entity);
    if (!is_string($passed) && is_object($passed)) {
      $entity->name->value = $passed->title;
      $entity->field_image_url->value = $passed->image;
      $date = explode('/', $passed->pubDate);
      $formatDate = $date[1] . '-' . (($date[0] < 10) ? '0' . $date[0] : $date[0]) . '-01';
      $entity->field_publication_date->value = $formatDate;
      $entity->save();
    } else {
      $unpublished[] = "<" . $entity->field_product_id->value . "> " . $entity->name->value;
      $entity->setUnpublished();
      $entity->save();
    }
  }
  \Drupal::logger('pubs_entity_type')->notice("Publications were not found in store feed and were unpublished: " . json_encode($unpublished));
}
